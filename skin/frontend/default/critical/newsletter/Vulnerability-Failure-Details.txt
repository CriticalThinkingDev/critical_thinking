Here are the failure details:

-----------------------------------------------------------------------------------------

Vulnerability: Reflected Cross-Site Scripting (XSS) Vulnerability

Details: Port: tcp/80


A reflected cross-site scripting vulnerability was identified in this web
application. Reflected cross-site scripting is when HTML or Javascript
content is supplied to a user defined parameter to have it then displayed
(aka: reflected) back to the user and rendered or interpreted by their
browser.


This web site responded to a harmless web request that included
Javascript/HTML which was reflected back, indicating that the underlying
web application may be vulnerable to being used in a cross-site scripting
(XSS) attack. While this vulnerability does not exploit the web server itself,
it can be utilized by an attacker to target end-users and potentially take
over their sessions or other sensitive information.


A simple proof of concept example of this would be for a user to supply
"<script>alert('123')</script>" to a user defined parameter and then upon submission, a message box would pop-up for the user because the user defined content was used to modify the content of
the responding page.


Cross-site scripting can be found in many different forms and combinations
so the full request and response that was used demonstrate this
vulnerability has been provided below as evidence.


All Cross-Site Scripting vulnerabilities are considered non-compliant by
PCI.
CVSSv2: AV:N/AC:M/Au:N/C:N/I:P/A:N
Service: apache:http_server
Reference:
http://www.cert.org/advisories/CA-2000-02.html
http://www.owasp.org/index.php/Cross-site_scripting
http://www.owasp.org/index.php/Data_Validation
http://www.owasp.org/index.php/Review_Code_for_Cross-site_scripting
Evidence:
URL: http://www.criticalthinking.com/<script>alert('TK00000001')</script>
Parameter: N/A
Request: GET /<script>alert('TK00000001')</script> HTTP/1.1
Accept: */*
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
Host: www.criticalthinking.com
Content-Type: text/html
Content-Length: 0

 

Response: HTTP/1.1 404 Not Found
Date: Wed, 28 Jan 2015 20:28:25 GMT
Server: Apache
X-Powered-By: PHP/5.3.26-1~dotdeb.0
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, precheck=0
Pragma: no-cache
Set-Cookie: frontend=618fb51bbaaf75dea85e5a97ba94579a;
expires=Thu, 30-Apr-2015 02:28:25 GMT; path=/;
domain=.criticalthinking.com; HttpOnly
Vary: Accept-Encoding
Transfer-Encoding: chunked
Content-Type: text/html; charset=UTF-8
Evidence: <script>alert('TK00000001')</script>

 

Remediation:
Before accepting any user-supplied data, the application should validate
this data's format and reject any characters that are not explicitly allowed
(i.e. a white-list). This list should be as restrictive as possible. Before using
any data (stored or user-supplied) to generate web page content, the
application should escape all non alpha-numeric characters (i.e. outputvalidation).
This is particularly important when the original source of data is
beyond the control of the application. Even if the source of the data isn't
performing input-validation, output-validation will still prevent XSS.
Please note that the listing of XSS vulnerabilities is not an exhaustive list,
and other XSS vulnerabilities may exist in the application.